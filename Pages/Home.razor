@page "/"
@inject IJSRuntime JSRuntime
@using JDR.Models

<PageTitle>JDR</PageTitle>

<div id="header">
    <h4>[Game name banner goes here]</h4>
</div>

<!-- Game container: Contains left, center and right panel -->
<div id="game-container">

    <!-- Left panel: Hero setup, stats and inventory -->
    <div id="left-panel">
        @if (heroCreated)
        {   <!-- Hero stats component -->
            <div id="hero-stats">
                <h4>Hero Stats</h4>
                <div class="stats">
                    <h4><strong>@hero?.Name</strong></h4>
                    <p><strong>Level </strong> @hero?.Level</p>
                    <p><strong>XP:</strong> @hero?.ExperienceValue / @hero?.ExperienceToNextLevel</p>
                    <p><strong>Health:</strong> @hero?.CurrentHealthValue / @hero?.MaxHealthValue</p>
                    <p><strong>Mana:</strong> @hero?.CurrentEnergyValue / @hero?.MaxEnergyValue</p>
                    <p><strong>Armor:</strong> @hero?.ArmorValue</p>
                    <p><strong>Attack:</strong> @hero?.AttackValue</p>
                    <p><strong>Bonus Dmg:</strong> +@hero?.BonusDamage</p>
                    <p><strong>Crit Chance:</strong> @hero?.AttackValue%</p>
                    <p><strong>Haste:</strong> @hero?.AttackValue%</p>
                    <p><strong>Dodge:</strong> @hero?.AttackValue%</p>
                </div>
            </div>

            <!-- Hero inventory component -->
            <div id="hero-inventory">
                <h4>Inventory</h4>
                <div class="inventory">
                    <p><strong>[Inventory Content]</strong></p>
                </div>
            </div>
        } else {   
            <!-- Hero creation component -->
            <h4>Create your hero</h4>
            <form @onsubmit="StartGame">
                <div>
                    <label for="characterName">Name your hero :</label><br/>
                    <input type="text" id="characterName" @bind="CharacterName" required />
                </div>
                <br />
                <div>
                    <label for="characterClass">Choose a class :</label><br/>
                    <select id="characterClass" @bind="CharacterClass" required>
                        <option value="Choose a class" disabled selected>Choose a class</option>
                        <option value="Mage">Mage</option>
                        <option value="Warrior" disabled>Warrior</option>
                        <option value="Archer" disabled>Archer</option>
                    </select>
                </div>
                <br />
                <button class="btn btn-danger" type="submit">Start the game!</button>
            </form>
        }
    </div>

    <!-- Central panel : Map of the game -->
    <div id="center-panel">
        @if (heroCreated)
        {
            <div style="position: relative;">
                <div
                class="grid"
                tabindex="0"
                @onkeydown="HandleKeyDown"
                @ref="gridRef"
                autofocus>
                    @for (int row = 0; row < GridSize; row++)
                    {
                        @for (int col = 0; col < GridSize; col++)
                        {
                            var cellContent = "";
                            if (row == hero.Y && col == hero.X)
                                cellContent = $"sprite {hero.FacingDirection}";
                            else if (monsters.Any(m => m.X == col && m.Y == row))
                            {
                                var monster = monsters.First(m => m.X == col && m.Y == row); // Trouver le monstre correspondant
                                if (monster.Name == "Dragon")
                                {
                                    cellContent = "boss"; // Case contenant un dragon
                                }
                                else
                                {
                                    cellContent = "monster"; // Autres types de monstres
                                }
                            }
                            else if (fountains.Any(m => m.X == col && m.Y == row))
                                cellContent = "fountain";
                            <div class="cell @cellContent"></div>
                        }
                    }
                </div>

                @if (isFighting)
                {
                    <div class="grid-overlay"></div> <!-- Grays out the map when hero is fighting -->
                }
            </div>
        }
    </div>

    <!-- Right panel : Fight interface -->
    <div id="right-panel">
        @if (isFighting)
        {
            <div id="fight">
                <h4>Fight</h4>
                <div class="fight-container">
                    <div class="hero">
                        <h4><strong>@hero?.Name</strong></h4>
                        <p><strong>Level </strong> @hero?.Level</p>
                        <p><strong>Health:</strong> @hero?.CurrentHealthValue / @hero?.MaxHealthValue HP</p>
                        <p><strong>Energy:</strong> @hero?.CurrentEnergyValue / @hero.MaxEnergyValue Mana</p>
                        <button class="btn btn-danger" @onclick="HeroAttack">Meteor Blast</button>
                    </div>
                    <div class="opponent">
                        <h4><strong>@monster?.Name</strong></h4>
                        <p><strong>Level </strong> @monster?.Level</p>
                        <p><strong>Health:</strong> @monster?.CurrentHealthValue / @monster?.MaxHealthValue</p>
                        <button class="btn btn-danger" @onclick="MonsterAttack">Base Attack</button>
                    </div>
                </div>
            </div>
        }

        <!-- Console component -->
        <div id="console">
            <ConsoleComponent />
        </div>
    </div>
</div>

<!-- Popup for game over event -->
@if (isGameOver)
{
    <div class="popup-overlay">
        <div class="popup">
            <p>You died !</p>
            <button class="btn btn-success" @onclick="RestartGame">Play again</button>
        </div>
    </div>
}

@code {
    // Fight component properties
    private readonly LevelProgression levelProgression = new();
    private Hero? hero;
    private Monster? monster;
    private bool isFighting = false;
    private bool heroCreated = false;
    private string CharacterName;
    private string CharacterClass;

    // Map component properties
    private const int GridSize = 10;
    private ElementReference gridRef;
    private bool isGameOver = false;
    private List<Monster> monsters = new();
    private List<LifeFountain> fountains = new();
    private Random random = new();
    private DateTime lastMovementTime = DateTime.MinValue;
    private readonly TimeSpan debounceDelay = TimeSpan.FromMilliseconds(100);

    // Fight component methods
    private void HeroAttack()
    {
        if (hero != null && monster != null)
        {
            // hero.BaseAttack(monster, null);
            // hero.LowTierAttack(monster, null);
            // hero.MidTierAttack(StateHasChanged);
            hero.UltimateAttack(monster, null);

            if (monster.CurrentHealthValue <= 0)
            {
                EndFight(); // Ends fight when monster is killed
            }

            StateHasChanged();
        }
    }

    // Manages the monsters' attacks
    private void MonsterAttack()
    {
        if (monster != null && hero != null)
        {
            monster.BaseAttack(hero, GameOver);
            StateHasChanged();
        }
        if (hero.CurrentHealthValue == 0)
        {
            isGameOver = true;
        }
    }

    private void GameOver()
    {
        isGameOver = true;
    }

    // Manages the end of the fight
    private async void EndFight()
    {
        // Remove actual monster from list
        if (monster != null)
        {
            var monsterToRemove = monsters.FirstOrDefault(m => m.X == hero.X && m.Y == hero.Y);
            if (monsterToRemove != null)
            {
                monsters.Remove(monsterToRemove);
            }
        }

        isFighting = false; // Turns off combat UI
        monster = null;         // Reinitialize monster
        await gridRef.FocusAsync(); // Makes the focus on the map
        StateHasChanged();  // Updates UI
    }

    // Map component methods

    // Generates entities at random location on the map
    private void GenerateEntities()
    {
        monsters.Clear(); // Clears monsters list
        fountains.Clear(); // Clears fountains list

        // Generates 5 monsters at random location
        for (int i = 0; i < 5; i++)
        {
            (int x, int y) = GetRandomPosition();
            monsters.Add(new MonsterGoblin(x, y, hero.Level));
        }

        // Generates 4 fountains at random location
        for (int i = 0; i < 4; i++)
        {
            (int x, int y) = GetRandomPosition();
            fountains.Add(new LifeFountain(x, y));
        }

        // Generates 1 boss
        for (int i = 0; i < 1; i++)
        {
            (int x, int y) = GetRandomPosition();
            monsters.Add(new Boss(x, y, hero.Level+2));
        }
    }

    private (int X, int Y) GetRandomPosition()
    {
        (int X, int Y) position;
        do
        {
            position = (random.Next(0, GridSize), random.Next(0, GridSize));
        } while (
            monsters.Any(m => m.X == position.X && m.Y == position.Y) ||
            fountains.Any(f => f.X == position.X && f.Y == position.Y) ||
            (position.X == hero.X && position.Y == hero.Y)
        );
        return position;
    }

    // Manages the keys' events
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (isFighting) return; // Player stays still on the map when fighting

        var now = DateTime.Now;
        if (now - lastMovementTime < debounceDelay) return; // Ignores if too quick

        if (e.Key.StartsWith("Arrow"))
        {
            string direction = e.Key.Replace("Arrow", ""); // Extract "Up", "Down", "Left", or "Right"
            hero.Move(direction, GridSize);
            CheckInteractions();    
            lastMovementTime = now; // Updates the last movement time
        }
    }

    // Checks interactions of hero with entities on map
    private void CheckInteractions()
    {
        var playerPosition = (hero.X, hero.Y);

        // Interaction with a monster
        monster = monsters.FirstOrDefault(m => (m.X, m.Y) == playerPosition);
        if (monster != null)
        {
            isFighting = true; // Turns on combat UI
            StateHasChanged();
        }

        // Interaction with a fountain
        var fountain = fountains.FirstOrDefault(f => (f.X, f.Y) == playerPosition);
        if (fountain != null)
        {
            LifeFountain.HealPlayer(hero);
            fountains.Remove(fountain);
            StateHasChanged();
        }
    }

    // Restarts a new game
    private void RestartGame()
    {
        heroCreated = false;
        isFighting = false;
        isGameOver = false; // Turns off the game over popup
    }

    private void StartGame()
    {
        hero = Hero.CreateHero(CharacterClass, CharacterName);
        heroCreated = true;
        GenerateEntities();
        StateHasChanged();
    }

    // Keep focus on the map ++ prevents page scrolling with arrow keys
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("preventArrowScroll");
            if (heroCreated && gridRef.Context != null)
            {
                await gridRef.FocusAsync();
            }
        }
    }

    // OnInitialized method
    protected override void OnInitialized()
    {
        RestartGame();
    }
}