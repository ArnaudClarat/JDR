@page "/"
@using JDR.Models

<PageTitle>JDR</PageTitle>

<!-- Game container: Contains left, center and right panel -->
<div id="game-container">
    
    <!-- Left panel: Hero setup, stats and inventory -->
    <div id="left-panel">
        <!-- Hero setup component -->
        <div id="hero-setup">
            <h3>Hero setup</h3>
            <label for="heroName">Hero Name:</label>
            <input id="heroName" type="text" />

            <label for="heroClass">Hero Class:</label>
            <select id="heroClass">
                <option value="warrior">Warrior</option>
                <option value="mage">Mage</option>
                <option value="rogue">Rogue</option>
            </select>
        </div>

        <!-- Hero stats component -->
        <div id="hero-stats">
            <h3>Hero Stats</h3>
            <p>[Hero stats summary]</p>
        </div>

        <!-- Hero inventory component -->
        <div id="hero-inventory">
            <h3>Hero Inventory</h3>
            <p>[Inventory details]</p>
        </div>
    </div>

    <!-- Central panel : Map of the game -->
    <div id="center-panel">
        <h4 id="title">@player.Name : @player.CurrentLife / @player.MaxLife</h4>

        <div
            class="grid"
            tabindex="0"
            @onkeydown="HandleKeyDown"
            @ref="gridRef"
            autofocus>
            @for (int row = 0; row < GridSize; row++)
            {
                @for (int col = 0; col < GridSize; col++)
                {
                    var cellContent = "";
                    if (row == player.Y && col == player.X)
                        cellContent = $"sprite {player.FacingDirection}";
                    else if (monsters.Any(m => m.X == col && m.Y == row))
                        cellContent = "monster";
                    else if (fountains.Any(m => m.X == col && m.Y == row))
                        cellContent = "fountain";
                    <div class="cell @cellContent"></div>
                }
            }
        </div>
    </div>

    <!-- Right panel : Fight interface -->
    <div id="right-panel">
        <div id="fight">
            <h3>Fight</h3>
            <div class="players-container">
                <div class="player">
                    <p><strong>Player's name:</strong> @hero?.CharacterName</p>
                    <p><strong>Level:</strong> @hero?.Level</p>
                    <p><strong>Experience:</strong> @hero?.ExperienceValue / @hero?.ExperienceToNextLevel</p>
                    <p><strong>Health:</strong> @hero?.HealthValue HP</p>
                    <p><strong>Energy:</strong> @hero?.EnergyValue Energy</p>
                    <p><strong>Attack:</strong> @hero?.AttackValue Damage</p>
                    <button class="btn btn-danger" @onclick="HeroAttack">P2 Attack P1</button>
                </div>
                <div class="opponent">
                    <p><strong>Foe's name:</strong> @foe?.CharacterName</p>
                    <p><strong>Level:</strong> @foe?.Level</p>
                    <p><strong>LevelRollResult:</strong> @foe?.RollResult</p>
                    <p><strong>Health:</strong> @foe?.HealthValue HP</p>
                    <p><strong>Energy:</strong> @foe?.EnergyValue Energy</p>
                    <button class="btn btn-danger" @onclick="FoeAttack">Foe Attack P1</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Console component -->
<div id="console">
    <ConsoleComponent />
</div>

<!-- Popup for game over event -->
@if (isGameOver)
{
<div class="popup-overlay">
    <div class="popup">
        <p>You died !</p>
        <button class="btn btn-success" @onclick="RestartGame">Play again</button>
    </div>
</div>
}

@code {
    // Fight component properties
    private readonly LevelProgression levelProgression = new();
    private HeroMage? hero;
    private FoeGoblin? foe;
    
    // Map component properties
    private const int GridSize = 10;
    private ElementReference gridRef;
    private Player player = new Player("John Doe", 100);
    private bool isGameOver = false;
    private List<Monster> monsters = new();
    private List<LifeFountain> fountains = new();
    private Random random = new();
    private DateTime lastMovementTime = DateTime.MinValue;
    private readonly TimeSpan debounceDelay = TimeSpan.FromMilliseconds(100);
    
    // Fight component methods
    private void HeroAttack()
    {
        if (hero != null && foe != null)
        {
            hero.Attack(foe);
            StateHasChanged();
        }
    }
    
    private void FoeAttack()
    {
        if (foe != null && hero != null)
        {
            foe.Attack(hero);
            StateHasChanged();
        }
    }
    
    // Map component methods
    
    // Generates entities at random location on the map
    private void GenerateEntities()
    {
        monsters.Clear(); // Clears foes list
        fountains.Clear(); // Clears fountains list

        // Generates 5 foes at random location
        for (int i = 0; i < 5; i++)
        {
            (int x, int y) = GetRandomPosition();
            monsters.Add(new Monster(x, y));
        }

        // Generates 3 fountains at random location
        for (int i = 0; i < 3; i++)
        {
            (int x, int y) = GetRandomPosition();
            fountains.Add(new LifeFountain(x, y));
        }
    }

    private (int X, int Y) GetRandomPosition()
    {
        (int X, int Y) position;
        do
        {
            position = (random.Next(0, GridSize), random.Next(0, GridSize));
        } while (
            monsters.Any(m => m.X == position.X && m.Y == position.Y) ||
            fountains.Any(f => f.X == position.X && f.Y == position.Y) ||
            (position.X == player.X && position.Y == player.Y));
        return position;
    }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        var now = DateTime.Now;
        if (now - lastMovementTime < debounceDelay) return; // Ignores if too quick

        if (e.Key.StartsWith("Arrow"))
        {
            string direction = e.Key.Replace("Arrow", ""); // Extract "Up", "Down", "Left", or "Right"
            player.Move(direction, GridSize);
            CheckInteractions();    
            lastMovementTime = now; // Updates th last movement time
            await Task.Delay(50); // Delay before triggering new update
            StateHasChanged(); // Updates UI after delay
        }
    }

    // Checks interactions of hero with entities on map
    private void CheckInteractions()
    {
        var playerPosition = (player.X, player.Y);

        // Interaction with a foe
        var monster = monsters.FirstOrDefault(m => (m.X, m.Y) == playerPosition);
        if (monster != null)
        {
            Monster.Attack(player);
            monsters.Remove(monster);
            if (player.CurrentLife <= 0) { isGameOver = true; }
        }

        // Interaction with a fountain
        var fountain = fountains.FirstOrDefault(f => (f.X, f.Y) == playerPosition);
        if (fountain != null)
        {
            LifeFountain.HealPlayer(player);
            fountains.Remove(fountain);
        }
    }
    
    private void RestartGame()
    {
        player = new Player("John Doe", 100);
        GenerateEntities();
        isGameOver = false; // Turns off the game over popup
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await gridRef.FocusAsync();
        }
    }
    
    // OnInitialized method
    protected override void OnInitialized()
    {
        // Initialize map
        GenerateEntities(); // Initialize the map with foes and life fountains
        
        // Initialize player
        hero = new HeroMage("Ariana", false, 40, 2, levelProgression, 1, 0);
        
        // Initialize foe
        foe = new FoeGoblin("Goblin", false, 36, 52, 4, 3);
        foe.CalculateLevel(hero.Level);
    }
}