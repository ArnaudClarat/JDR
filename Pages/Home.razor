@page "/"
@inject IJSRuntime JSRuntime
@inject IServiceProvider ServiceProvider
@using JDR.Models

<PageTitle>JDR</PageTitle>

<div id="header">
    <h4>[Game name banner goes here]</h4>
</div>

<!-- Game container: Contains left, center and right panel -->
<div id="game-container">

    <!-- Left panel: Hero setup, stats and inventory -->
    <div id="left-panel">
        @if (heroCreated)
        {   <!-- Hero stats component -->
            <div id="hero-stats">
                <h4>Hero Stats</h4>
                <div class="stats">
                    <h4><strong>@hero?.Name</strong></h4>
                    <p><strong>Level </strong> @hero?.Level</p>
                    <p><strong>XP:</strong> @hero?.ExperienceValue / @hero?.ExperienceToNextLevel</p>
                    <p><strong>Health:</strong> @hero?.CurrentHealthValue / @hero?.MaxHealthValue</p>
                    <p><strong>Mana:</strong> @hero?.CurrentEnergyValue / @hero?.MaxEnergyValue</p>
                    <p><strong>Armor:</strong> @hero?.ArmorValue</p>
                    <p><strong>Attack:</strong> @hero?.AttackValue</p>
                    <p><strong>Bonus Dmg:</strong> +@hero?.BonusDamage</p>
                    <p><strong>Crit Chance:</strong> @hero?.CriticalChance%</p>
                    <p><strong>Haste:</strong> @hero?.HasteValue%</p>
                    <p><strong>Dodge:</strong> @hero?.DodgeRating%</p>
                </div>
            </div>

            <!-- Hero inventory component -->
            <div id="hero-inventory">
                <h4>Inventory</h4>
                <div class="inventory">
                    <p><strong>[Inventory Content]</strong></p>
                </div>
            </div>
        } else {   
            <!-- Hero creation component -->
            <h4>Create your hero</h4>
            <form @onsubmit="StartGame">
                <div>
                    <label for="characterName">Name your hero :</label><br/>
                    <input type="text" id="characterName" @bind="CharacterName" required />
                </div>
                <br />
                <div>
                    <label for="characterClass">Choose a class :</label><br/>
                    <select id="characterClass" @bind="CharacterClass" required>
                        <option value="Choose a class" disabled selected>Choose a class</option>
                        <option value="Mage">Mage</option>
                        <option value="Warrior" disabled>Warrior</option>
                        <option value="Archer" disabled>Archer</option>
                    </select>
                </div>
                <br />
                <button class="btn btn-danger" type="submit">Start the game!</button>
            </form>
        }
    </div>

    <!-- Central panel : Map of the game -->
    <div id="center-panel">
        <!-- Central panel : Map of the game -->
        <div id="center-panel">
            @if (heroCreated && hero != null)
            {
                <div class="grid" style="position: relative;">
                    <MapComponent 
                        @ref="mapComponent"
                        Hero="hero"
                        HeroCreated="heroCreated"
                        OnHeroStatsUpdated="UpdateHeroStats"
                        OnFightStateChange="HandleFightStateChange"
                        OnFight="HandleFight"
                        IsFighting="(() => isFighting)" />

                    @if (isFighting)
                    {
                        <div class="grid-overlay"></div> <!-- Grays out the map when hero is fighting -->
                    }
                </div>
            }
        </div>
    </div>

    <!-- Right panel : Fight interface -->
    <div id="right-panel">
        @if (isFighting)
        {
            <div id="fight">
                <h4>Fight</h4>
                <div class="fight-container">
                    <div class="hero">
                        <h4><strong>@hero?.Name</strong></h4>
                        <p><strong>Level </strong> @hero?.Level</p>
                        <p><strong>Health:</strong> @hero?.CurrentHealthValue / @hero?.MaxHealthValue HP</p>
                        <p><strong>Energy:</strong> @hero?.CurrentEnergyValue / @hero?.MaxEnergyValue Mana</p>
                        <button class="btn btn-danger" @onclick="HeroBaseAttack">Base Attack</button>
                        <button class="btn btn-danger" @onclick="HeroLowTierAttack">Frost Spikes</button>
                        <button class="btn btn-danger" @onclick="HeroMidTierAttack">Arcane Shield</button>
                        <button class="btn btn-danger" @onclick="HeroUltimateAttack">Meteor Blast</button>
                        <button class="btn btn-danger" @onclick="TryToFlee">Flee</button>
                    </div>
                    <div class="opponent">
                        <h4><strong>@monster?.Name</strong></h4>
                        <p><strong>Level </strong> @monster?.Level</p>
                        <p><strong>Health:</strong> @monster?.CurrentHealthValue / @monster?.MaxHealthValue</p>
                    </div>
                </div>
            </div>
        }

        <!-- Console component -->
        <div id="console">
            <ConsoleComponent />
        </div>
    </div>
</div>

<!-- Popup for game over event -->
@if (isGameOver)
{
    <div class="popup-overlay">
        <div class="popup">
            <p>You died !</p>
            <button class="btn btn-success" @onclick="RestartGame">Play again</button>
        </div>
    </div>
}

@code {
    // Fight component properties
    private Hero? hero;
    private Monster? monster;
    private bool isFighting;
    private bool heroCreated;
    private string? CharacterName;
    private string? CharacterClass;
    private Random random = new Random();

    // Map component properties
    private MapComponent mapComponent = null!;
    private bool isGameOver = false;

    // Fight component methods
    private void HeroBaseAttack()
    {
        if (hero != null && monster != null)
        {
            hero.BaseAttack(monster, null);
            if (monster.CurrentHealthValue <= 0)
            {
                mapComponent.EndFight(); // Ends fight when monster is killed
            }
            else
            {
                MonsterAttack();
            }
            StateHasChanged();
        }
    }
    private void HeroLowTierAttack()
    {
        if (hero != null && monster != null && hero.LowTierAttack(monster, null))
        {
            if (monster.CurrentHealthValue > 0)
            {
                MonsterAttack();
            }
            else
            {
                mapComponent.EndFight(); // Ends fight when monster is killed
            }
            StateHasChanged();
        }
    }
    private void HeroMidTierAttack()
    {
        if (hero != null && monster != null && hero.MidTierAttack(null, StateHasChanged))
        {
            if (monster.CurrentHealthValue > 0)
            {
                MonsterAttack();
            }
            else
            {
                mapComponent.EndFight(); // Ends fight when monster is killed
            }
            StateHasChanged();
        }
    }
    private void HeroUltimateAttack()
    {
        if (hero != null && monster != null && mapComponent != null && hero.UltimateAttack(monster, null))
        {
            if (monster.CurrentHealthValue > 0)
            {
                MonsterAttack();
            }
            else
            {
                mapComponent.EndFight(); // Ends fight when monster is killed
            }
            StateHasChanged();
        }
    }

    private void TryToFlee()
    {
        if (hero != null && monster != null && mapComponent != null)
        {
            Console.WriteLine($"{hero?.Name} tries to flee...");
            int fleeChance = 80;
            int roll = random.Next(1, 101);
        
            if (roll <= fleeChance)
            {
                MonsterAttack();
                Console.WriteLine($"{hero?.Name} took some damage by {monster?.Name} while fleeing !");
                mapComponent.EndFight(true);
            }
            else
            {
                Console.WriteLine($"{hero?.Name} couldn't flee !");
                MonsterAttack();
            }
        }
    }
    
    private void HandleFight(Monster monster)
    {
        this.monster = monster; // Met à jour le monstre
        StateHasChanged();
    }
    
    private void HandleFightStateChange(bool state)
    {
        isFighting = state;
        StateHasChanged();
    }
    

    // Manages the monsters' attacks
    private void MonsterAttack()
    {
        if (monster != null && hero != null)
        {
            monster.BaseAttack(hero, GameOver);
            StateHasChanged();
        }
        if (hero.CurrentHealthValue == 0)
        {
            isGameOver = true;
        }
    }
              
    private void UpdateHeroStats(Hero updatedHero)
    {
        StateHasChanged();
    }

    private void StartGame()
    {
        hero = Hero.CreateHero(CharacterClass, CharacterName);
        heroCreated = true;
    }
    
    private void GameOver()
    {
        isGameOver = true;
    }

    // Restarts a new game
    private void RestartGame()
    {
        heroCreated = false;
        isFighting = false;
        isGameOver = false; // Turns off the game over popup
    }

    // OnInitialized method
    protected override void OnInitialized()
    {
        RestartGame();
    }
}