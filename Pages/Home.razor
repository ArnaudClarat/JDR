@page "/"
@using JDR.Models

<h4 id="title">Grille avec Joueur</h4>

<div 
    class="grid" 
    tabindex="0"
    @onkeydown="HandleKeyDown"
    @ref="gridRef"
    autofocus
>
    @for (int row = 0; row < GridSize; row++)
    {
        @for (int col = 0; col < GridSize; col++)
        {
            <div class="cell @(row == player.Y && col == player.X ? $"sprite {player.FacingDirection}" : "")"></div>
        }
    }
</div>

@if (isGameOver)
{
    <div class="popup-overlay">
        <div class="popup">
            <p>Vous avez perdu ! Votre vie est à zéro.</p>
            <button class="btn btn-success" @onclick="RestartGame">Rejouer</button>
        </div>
    </div>
}
@code {
    private const int GridSize = 10;
    private ElementReference gridRef;
    private Player player = new Player("John Doe", 100);
    private LifeFountain fountain = new LifeFountain("Fontaine Sacrée", "Forêt Enchantée");
    private Monster monster = new Monster("Dragon");
    private bool isGameOver = false;

    private void ApproachFountain()
    {
        // La fontaine régénère la vie du joueur
        fountain.HealPlayer(player);
    }

    private void AttackMonster()
    {
        // Le monstre attaque le joueur
        monster.Attack(player);
        // CheckPlayerHealth();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key.StartsWith("Arrow"))
        {
            string direction = e.Key.Replace("Arrow", ""); // Extrait "Up", "Down", "Left", ou "Right"
            player.Move(direction, GridSize);
            StateHasChanged(); // Met à jour l'affichage
        }
    }

    private void RestartGame()
    {
        player = new Player("John Doe", 100);
        monster = new Monster("Dragon");
        isGameOver = false; // Masquer la popup de fin de jeu
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            {
                await gridRef.FocusAsync();
            }
    }
}
    
